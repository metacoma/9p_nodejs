import { Writer } from "./io";
import Stat from "./stat";
import Qid from "./qid";
import { Uint64 } from "./misc";
export default class Encoder {
    private writer;
    private bufferMode;
    private pendingMessages;
    constructor(writer: Writer);
    buffer(): void;
    flush(): void;
    tversion(msize: number, version: string): void;
    rversion(msize: number, version: string): void;
    tauth(tag: number, afid: number, uname: string, aname: string): void;
    rauth(tag: number, aqid: Qid): void;
    tattach(tag: number, fid: number, afid: number, uname: string, aname: string): void;
    rattach(tag: number, qid: Qid): void;
    rerror(tag: number, ename: string): void;
    tflush(tag: number, oldtag: number): void;
    rflush(tag: number): void;
    twalk(tag: number, fid: number, newfid: number, wnames: Array<string>): void;
    rwalk(tag: number, wqids: Array<Qid>): void;
    topen(tag: number, fid: number, mode: number): void;
    ropen(tag: number, qid: Qid, iounit: number): void;
    tcreate(tag: number, fid: number, name: string, perm: number, mode: number): void;
    rcreate(tag: number, qid: Qid, iounit: number): void;
    tread(tag: number, fid: number, offset: Uint64, count: number): void;
    rread(tag: number, data: Uint8Array): void;
    twrite(tag: number, fid: number, offset: Uint64, data: Uint8Array): void;
    rwrite(tag: number, count: number): void;
    tclunk(tag: number, fid: number): void;
    rclunk(tag: number): void;
    tremove(tag: number, fid: number): void;
    rremove(tag: number): void;
    tstat(tag: number, fid: number): void;
    rstat(tag: number, s: Stat): void;
    twstat(tag: number, fid: number, s: Stat): void;
    rwstat(tag: number): void;
    private produce(message);
    private send(buffer);
}
